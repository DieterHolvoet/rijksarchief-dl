{"version":3,"sources":["../src/ArchiveDocument.js"],"names":["fs","path","base64","ArchiveDocument","url","result","extractFifs","fif7","fif5","fif3","fif1","tile","layer","pos","starttile","tiles","row","col","cols","tileUrl","response","buffer","push","x","tilewidth","y","tileheight","src","writeFile","join","__dirname","err","console","log","Canvas","output","decode","streams","res","stream","body","on","error","pipe","rows","createWriteStream","request","require","size","factories","Array","fill","map","v","i","count","cb","metaUrl","text","xmlDoc","parseXml","parseInt","get","layers","find","obj","forEach","attr","value","val","exec"],"mappings":"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","file":"ArchiveDocument.js","sourcesContent":["import fetch from 'node-fetch';\nimport libxmljs from 'libxmljs';\nimport JPEGDecoder from 'jpg-stream/decoder';\nimport JPEGEncoder from 'jpg-stream/encoder';\nimport Mosaic from 'mosaic-image-stream';\nimport mergeImages from 'merge-images';\nimport Canvas from 'canvas';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as base64 from 'file-base64';\n\nclass ArchiveDocument {\n    constructor(url) {\n        const result = ArchiveDocument.extractFifs(url);\n        this.fif7 = result[1];\n        this.fif5 = result[2];\n        this.fif3 = result[3];\n        this.fif1 = result[4];\n    }\n\n    /**\n     * Extract the required parts from the URL\n     * @param val\n     * @example http://search.arch.be/imageserver/getpic.php?510/510_1546_000/510_1546_000_01852_000/510_1546_000_01852_000_0_0001.jp2&249\n     */\n    static extractFifs(val) {\n        return /(((([0-9]{3})_[0-9]{4}_[0-9]{3})_[0-9]{5}_[0-9]{3})_[0-9]{1}_[0-9]{4})/.exec(val);\n    }\n\n    /**\n     * Build a meta url based on an object with the separate values\n     * @return {string}\n     */\n    get metaUrl() {\n        return `http://search.arch.be/imageserver/topview.xml.php?FIF=${this.fif1}/${this.fif3}/${this.fif5}/${this.fif7}.jp2`;\n    }\n\n    /**\n     * Build a tile url based on an object with the separate values\n     * @param tile\n     * @return {string}\n     */\n    tileUrl(tile) {\n        return `http://search.arch.be/imageserver/getpic.php?${this.fif1}/${this.fif3}/${this.fif5}/${this.fif7}.jp2&${tile}`;\n    }\n\n    async buildImage(layer) {\n        let pos = layer.starttile;\n        const tiles = [];\n\n        for (let row = 0; row < 2/*layer.rows - 1*/; row++) {\n            for (let col = 0; col < layer.cols; col++) {\n                const url = this.tileUrl(pos);\n\n                // Fetch image\n                const response = await fetch(url);\n                const buffer = await response.buffer();\n\n                tiles.push({\n                    x: row * this.tilewidth,\n                    y: col * this.tileheight,\n                    src: buffer\n                });\n\n                fs.writeFile(path.join(__dirname, `${row}-${col}-image.jpg`), buffer, \"binary\", function(err) { console.log(err)});\n\n                pos++;\n            }\n        }\n\n        // Build and save image\n        base64.decode(\n            await mergeImages(tiles, { Canvas }),\n            path.join(__dirname, 'image.jpg'),\n            (err, output) => {\n                console.log('success');\n                console.log(err, output);\n            }\n        );\n    }\n\n    async buildTileArrays(layer) {\n        const streams = [];\n        let pos = layer.starttile;\n\n        for (let row = 0; row < 2/*layer.rows - 1*/; row++) {\n            streams[row] = [];\n\n            for (let col = 0; col < layer.cols; col++) {\n                const url = this.tileUrl(pos);\n                const res = await fetch(url);\n                const stream = res.body\n                    .on('error', err => console.error)\n                    .pipe(new JPEGDecoder());\n\n                streams[row].push(stream);\n                pos++;\n            }\n        }\n\n        return streams;\n    }\n\n    stitchTiles(layer, streams) {\n        Mosaic(streams, layer.rows * this.tileheight)\n            /*.on('error', console.error)\n            .on('finish', () => console.log('hallo'))\n            .on('close', () => console.log('hallos'))*/\n            .pipe(new JPEGEncoder())\n            .pipe(fs.createWriteStream(path.join(__dirname, 'testje.jpg')));\n        // console.log(`Written to ${path.join(__dirname, 'testje.jpg')}`);\n    }\n\n    mosaics(layer) {\n        var request = require('request')\n        const size = [layer.rows, layer.cols];\n        var factories = Array(size[0]).fill().map((v, i) => {\n            var count = 0\n            return (cb) => {\n                var url = this.tileUrl(layer.starttile + (count * size[0]) + i);\n                // console.log(count+', '+i+', '+size[1]);\n                console.log(url);\n                if (++count > size[1]) return cb(null, null)\n                cb(null, request(url).pipe(new JPEGDecoder()))\n            }\n        })\n\n        Mosaic(factories, size[1] * 150)\n            .on('error', console.error)\n            .pipe(new JPEGEncoder())\n            .pipe(fs.createWriteStream(path.join(__dirname, 'testjse.jpg')))\n    }\n\n    async fetchMeta() {\n        const result = await fetch(this.metaUrl);\n        const body = await result.text();\n        const xmlDoc = libxmljs.parseXml(body);\n\n        // Extract tile dimensions\n        this.tilewidth = parseInt(xmlDoc.get('//tjpinfo/tilewidth').text());\n        this.tileheight = parseInt(xmlDoc.get('//tjpinfo/tileheight').text());\n\n        // Extract layers\n        this.layers = xmlDoc.get('//layers').find('layer')\n            .map((layer) => {\n                const obj = {};\n                ['no', 'starttile', 'cols', 'rows', 'scalefactor', 'width', 'height'].forEach((attr) => {\n                    obj[attr] = parseInt(layer.attr(attr).value());\n                });\n                return obj;\n            });\n    }\n}\n\nexport default ArchiveDocument;\n"]}