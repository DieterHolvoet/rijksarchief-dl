{"version":3,"sources":["../src/ArchiveDocument.js"],"names":["fs","path","ArchiveDocument","url","result","extractFifs","fif7","fif5","fif3","fif1","tile","layer","streams","pos","starttile","row","col","cols","tileUrl","res","stream","body","on","console","error","pipe","log","JSON","stringify","meta","push","rows","tileheight","createWriteStream","join","__dirname","metaUrl","text","xmlDoc","parseXml","tilewidth","parseInt","get","layers","find","map","obj","forEach","attr","value","val","exec"],"mappings":"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","file":"ArchiveDocument.js","sourcesContent":["import fetch from 'node-fetch';\nimport libxmljs from 'libxmljs';\nimport JPEGDecoder from 'jpg-stream/decoder';\nimport JPEGEncoder from 'jpg-stream/encoder';\nimport Mosaic from 'mosaic-image-stream';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nclass ArchiveDocument {\n    constructor(url) {\n        const result = ArchiveDocument.extractFifs(url);\n        this.fif7 = result[1];\n        this.fif5 = result[2];\n        this.fif3 = result[3];\n        this.fif1 = result[4];\n    }\n\n    /**\n     * Extract the required parts from the URL\n     * @param val\n     * @example http://search.arch.be/imageserver/getpic.php?510/510_1546_000/510_1546_000_01852_000/510_1546_000_01852_000_0_0001.jp2&249\n     */\n    static extractFifs(val) {\n        return /(((([0-9]{3})_[0-9]{4}_[0-9]{3})_[0-9]{5}_[0-9]{3})_[0-9]{1}_[0-9]{4})/.exec(val);\n    }\n\n    /**\n     * Build a meta url based on an object with the separate values\n     * @return {string}\n     */\n    get metaUrl() {\n        return `http://search.arch.be/imageserver/topview.xml.php?FIF=${this.fif1}/${this.fif3}/${this.fif5}/${this.fif7}.jp2`;\n    }\n\n    /**\n     * Build a tile url based on an object with the separate values\n     * @param tile\n     * @return {string}\n     */\n    tileUrl(tile) {\n        return `http://search.arch.be/imageserver/getpic.php?${this.fif1}/${this.fif3}/${this.fif5}/${this.fif7}.jp2&${tile}`;\n    }\n\n    async buildTileArrays(layer) {\n        const streams = [];\n        let pos = layer.starttile;\n\n        for (let row = 0; row < 2/*layer.rows - 1*/; row++) {\n            streams[row] = [];\n\n            for (let col = 0; col < layer.cols; col++) {\n                const url = this.tileUrl(pos);\n                const res = await fetch(url);\n                const stream = res.body\n                    .on('error', err => console.error)\n                    .pipe(new JPEGDecoder())\n                    .on('meta', meta => console.log('Meta: '+JSON.stringify(meta)))\n                    .on('finish', meta => console.log('Finish: '+JSON.stringify(meta)));\n\n                streams[row].push(stream);\n                pos++;\n            }\n        }\n\n        return streams;\n    }\n\n    stitchTiles(layer, streams) {\n        Mosaic(streams, layer.rows * this.tileheight)\n            .on('error', console.error)\n            .on('finish', () => console.log('hallo'))\n            .pipe(new JPEGEncoder())\n            .pipe(fs.createWriteStream(path.join(__dirname, 'testje.jpg')));\n        console.log(`Written to ${path.join(__dirname, 'testje.jpg')}`);\n    }\n\n    async fetchMeta() {\n        const result = await fetch(this.metaUrl);\n        const body = await result.text();\n        const xmlDoc = libxmljs.parseXml(body);\n\n        // Extract tile dimensions\n        this.tilewidth = parseInt(xmlDoc.get('//tjpinfo/tilewidth').text());\n        this.tileheight = parseInt(xmlDoc.get('//tjpinfo/tileheight').text());\n\n        // Extract layers\n        this.layers = xmlDoc.get('//layers').find('layer')\n            .map((layer) => {\n                const obj = {};\n                ['no', 'starttile', 'cols', 'rows', 'scalefactor', 'width', 'height'].forEach((attr) => {\n                    obj[attr] = parseInt(layer.attr(attr).value());\n                });\n                return obj;\n            });\n    }\n}\n\nexport default ArchiveDocument;\n"]}